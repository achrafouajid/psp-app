// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Admin
  Lab
  Nurse
  Patient
}

enum UserStatus {
NeedInitialization
Active
}

enum RequestStatusEnum {
Constitue
Cree
Complete
Attente
Accepte
Refuse
}

enum DiagnosticEnum {
Scanner
Biopsie
}

enum ProgramEnum {
  PAP
  DAP
  PSP 
}
enum SocialEnum {
  CNOPS
  CNSS
  FAR
  Prive
  Other
}  
enum EducationEnum {
  Analphabete
  Primaire
  College
  Lycee
  Universitaire
}
enum HabitatEnum {
  Urbain
  SubUrbain
  Rural
}
enum EstablishmentEnum {
  Hopital
  Clinique
  Cabinet
}

enum TitleEnum {
  Pr
  Dr
}

enum SecteurEnum {
  Public
  Prive
}
enum PriorityEnum {
  HVT
  LVT
}

enum BlogStatusEnum {
  Attente
  Publie
  Refuse
  Modifications
}

enum AppointmentStatusEnum {
  Pending
  Expired
  Rescheduled
}
enum RepeatEnum {
  Null
  Daily
  Weekly
  Monthly
  Yearly
}
model Patient {
  id String @id @default(cuid()) @map("_id") 
  firstName String
  patientno String
  lastName String 
  address String?
  birthDate DateTime?
  avatarId String? @unique
  notes String?
  program ProgramEnum?
  image Document? @relation(fields: [avatarId],references: [id])
  createdAt DateTime @default(now())
  requests Request[] 
  isConsent Boolean @default(false)
  doctor Doctor? @relation(fields: [doctorId],references: [id])
  doctorId String?
  inclCriteria inclCriteria? 
  exclCriteria exclCriteria? 
  inclDate DateTime?
  isMajor Boolean
  isSocial Boolean
  isConfDiag Boolean
  isIncomplete Boolean
  isAbroad Boolean
  isUnreachable Boolean
  tel String
  mail String?
  social SocialEnum?
  othersocial String?
  education EducationEnum?
  habitat HabitatEnum?
  iscaregiver Boolean
  caregiver CareGiver? 
  diagnostic DiagnosticEnum?
  diagnosticDate DateTime?
  prerequest Boolean?
  statusRequest Boolean?
  refDoc Boolean?
  appointments Appointment[]
}

model CareGiver {
  id String @id @default(cuid()) @map("_id")
  fullName String? 
  patientId String @unique
  tel String?
  Patient Patient @relation(fields:[patientId],references: [id],onDelete: Cascade)

}

model inclCriteria {
  id String @id @default(cuid()) @map("_id")
  patientId String @unique
  isMajor Boolean
  isConfDiag Boolean
  isSocial Boolean
  isConsent Boolean
  Patient Patient @relation(fields:[patientId],references: [id],onDelete: Cascade)
}

model exclCriteria {
  id String @id @default(cuid()) @map("_id")
  patientId String @unique
  isIncomplete Boolean
  isAbroad Boolean
  isUnreachable Boolean
  Patient Patient @relation(fields:[patientId],references: [id],onDelete: Cascade)
}
model Doctor{
  id String @id @default(cuid()) @map("_id")
  title TitleEnum @default(Dr)
  firstName String
  lastName String
  establishment EstablishmentEnum?
  service String?
  secteur SecteurEnum?
  Patient Patient[]
  city City? @relation(fields:[cityId],references: [id],onDelete: Cascade)
  cityId String?
  priority PriorityEnum?
  tel String?
  mail String?
  appointment Appointment[]


}

model City {
  id String @id @default(cuid()) @map("_id")
  name String @unique
  region Region @relation(fields:[regionId],references: [id],onDelete: Cascade)
  regionId String
  doctors Doctor[]
}
model Region {
  id String @id @default(cuid()) @map("_id")
  name String @unique
  city City[]
  attache String?
}

model Request {
  id String @id @default(cuid()) @map("_id")
  number Int @default(autoincrement()) @unique
  createdAt DateTime
  statuses RequestStatus[]
  patientId String
  Patient Patient @relation(fields:[patientId],references: [id],onDelete: Cascade)
  
}


model RequestDocument {
  requestStatusId String
  documentId String @unique
  @@id([requestStatusId,documentId])
  request RequestStatus @relation(fields:[requestStatusId],references:[id],onDelete: Cascade)
  document Document @relation(fields: [documentId],references: [id])
}
model RequestStatus {
  id String @id @default(cuid()) @map("_id")
  createdAt DateTime
  current Boolean
  remark String?
  status RequestStatusEnum 
  requestId String 
  request Request @relation(fields: [requestId],references: [id],onDelete: Cascade)
  documents RequestDocument[]
  
}
model User {
  id String @id @default(cuid()) @map("_id")
  firstName String 
  lastName String 
  address String? 
  email String @unique
  role UserRole @default(Patient)
  passwordHash String 
  emailVerified DateTime?
  birthDate DateTime?
  status UserStatus @default(NeedInitialization)
  otp String?
  emailVerificationCode String?
  avatarId String? @unique
  avatar Document?  @relation(fields: [avatarId],references: [id])
  blogs Blog[]
  emails Email[]
  messageSent Message[] @relation("messageSent")
  messageReceived Message[] @relation("messageReceived")
  notes String?
  program ProgramEnum?
  
}

model Document {
  id String @id @default(cuid()) @map("_id")
  memeType String
  path String
  url String
  user User? 
  blog Blog?
  patient Patient?
  request RequestDocument?
}
model Category{
  id String @id @default(cuid()) @map("_id")
  label String @unique
  color String
  CategoryBlogs BlogCategory[]
}

model BlogCategory{
  blogId String 
  categoryId String 
  category Category @relation(fields: [categoryId], references: [id])
  blog Blog  @relation(fields: [blogId], references: [id])
  @@id([blogId,categoryId])
}

model Blog{
  id String @id @default(cuid()) @map("_id")
  title String
  content String @db.LongText
  publishedAt DateTime @default(now())
  categories BlogCategory[] 
  authorId String
  imageId String  @unique
  image Document @relation(fields: [imageId], references: [id])
  author User @relation(fields:[authorId],references: [id])
  status BlogStatusEnum @default(Attente)
  viewCount Int @default(0)
  notes String?

}




model Email {
 id          String    @id @default(cuid()) @map("_id")
senderId String 
  receiverId String 
 subject     String
 body        String @db.MediumText
 sentDate    DateTime @default(now())
 sender User  @relation("messageSent",fields: [senderId], references: [id])
receiver User @relation("messageReceived",fields: [receiverId], references: [id])
}

model Appointment {
  id String @id @default(cuid()) @map("_id")
  patientId String
  subject String
  startTime DateTime
  endTime DateTime
  patient Patient @relation(fields: [patientId], references: [id])
  doctorId String?
  doctor Doctor? @relation(fields: [doctorId], references: [id])
  note String?
  status AppointmentStatusEnum? @default(Pending)
  room String?

}



