// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Admin
  Lab
  Nurse
  Patient
}

enum UserStatus {
NeedInitialization
Active
}

enum RequestStatusEnum {
NeedInitialization
Created
Complete
Pending
Accepted
Declined
}

enum ProgramEnum {
  PAP
  DAP
  PSP 
} 

model Patient {
  id String @id @default(cuid()) @map("_id")
  firstName String 
  lastName String 
  address String? 
  birthDate DateTime?
  avatarId String? @unique
  notes String?
  program ProgramEnum?
  image Document? @relation(fields: [avatarId],references: [id])
  createdAt DateTime @default(now())
  requests Request[]
  isConsent Boolean @default(false)
  
}

model Request {
  id String @id @default(cuid()) @map("_id")
  number Int @default(autoincrement()) @unique
  createdAt DateTime
  remark String?
  statuses RequestStatus[]
  patientId String
  Patient Patient @relation(fields:[patientId],references: [id])
  documents RequestDocument[]
  
}

model RequestDocument {
  requestId String
  documentId String @unique
  @@id([requestId,documentId])
  request Request @relation(fields:[requestId],references:[id])
  document Document @relation(fields: [documentId],references: [id])
}
model RequestStatus {
  id String @id @default(cuid()) @map("_id")
  createdAt DateTime
  current Boolean
  status RequestStatusEnum 
  requestId String 
  request Request @relation(fields: [requestId],references: [id])
  
}
model User {
  id String @id @default(cuid()) @map("_id")
  firstName String 
  lastName String 
  address String? 
  email String @unique
  role UserRole @default(Patient)
  passwordHash String 
  emailVerified DateTime?
  birthDate DateTime?
  status UserStatus @default(Active)
  emailVerificationCode String?
  avatarId String? @unique
  avatar Document?  @relation(fields: [avatarId],references: [id])
  blogs Blog[]
  messageSent Message[] @relation("messageSent")
  messageReceived Message[] @relation("messageReceived")
  notes String?
  program ProgramEnum?
  
}

model Document {
  id String @id @default(cuid()) @map("_id")
  memeType String
  path String
  url String
  user User? 
  blog Blog?
  patient Patient?
  request RequestDocument?
}
model Category{
  id String @id @default(cuid()) @map("_id")
  label String @unique
  color String
  CategoryBlogs BlogCategory[]
}

model BlogCategory{
  blogId String 
  categoryId String 
  category Category @relation(fields: [categoryId], references: [id])
  blog Blog  @relation(fields: [blogId], references: [id])
  @@id([blogId,categoryId])
}

model Blog{
  id String @id @default(cuid()) @map("_id")
  title String
  content String @db.LongText
  publishedAt DateTime @default(now())
  categories BlogCategory[] 
  authorId String
  imageId String  @unique
  image Document @relation(fields: [imageId], references: [id])
  author User @relation(fields:[authorId],references: [id])

}

model Message {
  id String @id @default(cuid()) @map("_id")
  senderId String 
  receiverId String 
  content String @db.MediumText
  createdAt DateTime
  sender User  @relation("messageSent",fields: [senderId], references: [id])
  receiver User @relation("messageReceived",fields: [receiverId], references: [id])
}




